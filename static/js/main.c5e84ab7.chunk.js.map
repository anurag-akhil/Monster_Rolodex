{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search_box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAIaA,G,MAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCJbC,G,MAAW,SAAAR,GAAK,OAC1B,qBAAKC,UAAU,YAAf,SAESD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAAUA,EAAjC,cAAWA,EAAQC,WCJtBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCiCHG,G,wDArCX,aACC,IAAD,8BACI,gBAaJH,aAAe,SAAAI,GAAK,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrD,EAAKC,MAAQ,CACTb,SAAS,GACTU,YAAa,IAJrB,E,kMASyBI,MAAM,8C,cAAvBC,E,gBACcA,EAASC,O,OAAvBC,E,OACJC,KAAKT,SAAS,CAACT,SAAUiB,I,qIAKpB,IAAD,EAE4BC,KAAKL,MAA9Bb,EAFH,EAEGA,SAAUU,EAFb,EAEaA,YACXS,EAAmBnB,EAASoB,QAAO,SAAAzB,GAAO,OAC5CA,EAAQE,KAAKwB,cAAcC,SAASZ,EAAYW,kBAEpD,OACI,sBAAK7B,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CACIW,YAAY,kBACZC,aAAcc,KAAKd,eAEvB,cAAC,EAAD,CAAUJ,SAAUmB,W,GA/BlBI,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c5e84ab7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list-styles.css';\r\n\r\nexport const CardList = props => (\r\n   <div className=\"card-list\">\r\n        {\r\n            props.monsters.map(monster => (\r\n                <Card key={monster.id} monster= {monster}> </Card>\r\n            ))\r\n        }\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        type=\"search\" \r\n        className=\"search\"\r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)","import React, {Component, useState} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from \"./components/search_box/search-box.component\";\nimport './App.css';\nclass App extends Component{\n    constructor()\n    {\n        super();\n        this.state = {\n            monsters:[],\n            searchField: \"\"\n        };\n    }\n    async componentDidMount()\n    {\n        let response = await fetch('https://jsonplaceholder.typicode.com/users');\n        let users = await response.json();\n        this.setState({monsters: users});\n    }\n\n    handleChange = e =>{this.setState({searchField: e.target.value});};\n\n    render(){\n\n        const {monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster => \n            monster.name.toLowerCase().includes(searchField.toLowerCase()) \n            );\n        return(\n            <div className=\"App\"> \n                <h1>Monster Rolodex</h1>\n                <SearchBox\n                    placeholder=\"search Monsters\"\n                    handleChange={this.handleChange}\n                />\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}